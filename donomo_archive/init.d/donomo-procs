#!/bin/sh

# chkconfig: - 99 06
# description: Donomo Archive Processing Pipeline
# pidfile: /var/run/donomo/processor.pid

source /etc/rc.d/init.d/functions

workdir=/var/lib/donomo
pidfile=/var/run/donomo/processors.pid
logfile=/var/log/donomo/processors.log
prog="Donomo-Processors"

function setup_env
{
    export USER=donomo
    export LOGNAME=$USER
    export HOME=/home/$USER
    export DONOMO_HOME=$HOME

    source $DONOMO_HOME/bin/env.sh

    threshold=${DONOMO_PROC_THRESHOLD:-20}
}

function start
{
    pid=$(pidofproc -p "$pidfile" "$prog")
    if [[ -n "$pid" ]]
    then
        echo -n "- Already running: pid=$pid"
        return 1
    fi

    nice su -c "$HOME/bin/processors --daemonize --pidfile=$pidfile --logfile=$logfile --workdir=$workdir" $USER

    return $?
}

function stop
{
    killproc -p $pidfile
}

function queue_length
{
    su -c "$HOME/bin/queue-length" $USER
}

function is_running {
    local svc=$1
    local name=${2:-$1}
    service ${svc:?} status | grep -c -E "$name \\(pid *( [0-9]+)+\\) is running..."
}

function stop_if_idle {
    local solr=$(is_running solr)
    local app=$(is_running nginx)
    local db=$(is_running mysqld)

    if [[ $(( solr + app + db )) -gt 0 ]]
    then
        echo "... other modules are running"
        return 1
    fi

    local pending=$(queue_length)
    if [[ $pending -gt $threshold ]]
    then
        echo "... $pending pending jobs"
        return 1
    fi

    while [[ $(is_running "$(basename $0)" "$prog") -gt 0 ]]
    do
        echo -n "."
        stop
        sleep 5
    done

    /sbin/shutdown -h now
}

function spawn_if_overloaded
{
    local pending=$(queue_length)
    echo "... $pending pending"
    if [[ $pending -gt $threshold ]]
    then
        python -m donomo.archive.tools.spawn_instance --i ${DONOMO_PROC_AMI:?} -n $(( 1 + pending / threshold / 2 ))
    fi
}

setup_env

case ${1:?} in
    start)
        action "Starting $prog" start
        ;;
    stop)
        action "Stopping $prog" stop
        ;;
    status)
        status -p $pidfile "$prog"
        ;;
    restart)
        "$0" stop
        "$0" start
        ;;
    pending)
        queue_length
        ;;
    prune)
        action "Pruning processing node" stop_if_idle
        ;;
    spawn)
        action "Spawning processing node" spawn_if_overloaded
        ;;
    *)
        echo "Usage: $(basename $0) start|status|stop|restart|pending|prune"
        exit 1
        ;;
esac
