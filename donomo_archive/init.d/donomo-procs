#!/bin/sh

# chkconfig: - 99 06
# description: Donomo Archive Processing Pipeline
# pidfile: /var/run/donomo/processor.pid

source /etc/rc.d/init.d/functions

workdir=/var/lib/donomo
pidfile=/var/run/donomo/processors.pid
logfile=/var/log/donomo/processors.log
prog="Donomo-Processors"


##############################################################################
#
# Run an application shell or database shell
#

function run_shell
{
    command="python -m donomo.manage '$1'"
    echo $#
    while [[ $# -gt 1 ]]
    do
        shift
        command="$command '$1'"
    done
    echo $command
    exec su -c "$command" $USER
}


function setup_env
{
    export USER=donomo
    export LOGNAME=$USER
    export HOME=/home/$USER
    export DONOMO_HOME=$HOME

    source $DONOMO_HOME/bin/env.sh

    spawn_threshold=${DONOMO_PROC_THRESHOLD:-30}
    kill_threshold=${DONOMO_PROC_KILL_THRESHOLD:-5}
}

function start
{
    pid=$(pidofproc -p "$pidfile" "$prog")
    if [[ -n "$pid" ]]
    then
        echo -n "- Already running: pid=$pid"
        return 1
    fi

    export KEEP_ENVIRONMENT=true

    nice su -c "$HOME/bin/processors --daemonize --pidfile=$pidfile --logfile=$logfile --workdir=$workdir" $USER

    return $?
}

function stop
{
    killproc -p $pidfile
}


function runtime_stats
{
    su -c "python -m donomo.archive.tools.runtime_stats $1" $USER
}

function print_sample
{
    local sample="\"$(date -u '+%F %T')\", $(runtime_stats pending), $(runtime_stats instances)"

    if [[ -z "$1" ]]
    then
        echo "$sample"
    else
        if [[ ! -e "$1" ]]
        then
            echo '"Timestamp (UTC)", "Pending Work Items", "Instances"' > "$1"
        fi
        echo "$sample" >> "$1"
    fi
}

function is_running {
    local svc=$1
    local name=${2:-$1}
    service ${svc:?} status | grep -c -E "$name \\(pid *( [0-9]+)+\\) is running..."
}

function stop_if_idle {
    local solr=$(is_running solr)
    local app=$(is_running nginx)
    local db=$(is_running mysqld)

    if [[ $(( solr + app + db )) -gt 0 ]]
    then
        echo "Pruning aborted ... there are other modules are running!"
        return 1
    fi

    local pending=$(runtime_stats pending)
    if [[ $pending -gt $kill_threshold ]]
    then
        [[ "$1" = "-q" ]] || echo "Not ready to prune ... $pending pending jobs"
        return 0
    fi

    echo -n "Shutting down proessing node "
    while [[ $(is_running "$(basename $0)" "$prog") -gt 0 ]]
    do
        echo -n "."
        stop
        sleep 5
    done

    /sbin/shutdown -h now
}

function spawn_if_overloaded
{
    local pending=$(runtime_stats pending)

    if [[ $pending -gt $spawn_threshold ]]
    then
        echo "Spawning!  There are $pending work items in the queue."
        python -m donomo.archive.tools.spawn_instance --i ${DONOMO_PROC_AMI:?} -n $(( 1 + pending / spawn_threshold / 2 ))
    elif [[ "$1" != "-q" ]]
    then
        echo "Not spawning.  There are only $pending work items in the queue."
    fi
}

setup_env

case ${1:?} in
    manage)
        shift
        run_shell "$@"
        ;;
    syncdb|dbshell|shell)
        run_shell $1
        ;;
    sample)
        print_sample "$2"
        ;;
    start)
        action "Starting $prog" start
        ;;
    stop)
        action "Stopping $prog" stop
        ;;
    status)
        status -p $pidfile "$prog"
        ;;
    restart)
        "$0" stop
        "$0" start
        ;;
    pending|instances)
        runtime_stats $1
        ;;
    prune)
        stop_if_idle "$2"
        ;;
    spawn)
        spawn_if_overloaded "$2"
        ;;
    *)
        echo "Usage: $(basename $0) start|status|stop|restart|pending|prune|manage"
        exit 1
        ;;
esac
