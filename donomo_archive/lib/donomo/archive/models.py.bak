"""
Core Models.
"""

from __future__ import with_statement
from django.conf import settings
from django.db import models
from django.contrib.auth.models import User
from django.contrib.contenttypes.models  import ContentType
from django.contrib.contenttypes import generic
from tempfile import gettempdir
from StringIO import StringIO
from django.utils.timesince import timesince
import docstore.core.utils  as core_utils
from docstore.core.utils import make_property
from cStringIO import StringIO

# -----------------------------------------------------------------------------

def _get_s3_object( view_object ):

    """ Retrieve the S3 programmatic object corresponsing to the given view.
    """

    return  core_utils.get_s3_object(
        s3_bucket = core_utils.get_s3_bucket(),
        path      = view_object.s3_path )


# -----------------------------------------------------------------------------

def _get_s3_url(
    view_object,
    expires_in = 30 * 60,
    method     = 'GET',
    headers    = None,
    query_auth = False):

    """ Generate an S3 URL referring to any object that exposes an s3_path
        attribute.  Optionally, the URL can include authentication info as
        query parameters (set 'query_auth' to True) which expire in the next
        'expires_in' seconds (30 minutes by default).
    """

    return _get_s3_object(view_object).generate_url(
        expires_in,
        method,
        headers,
        query_auth )


# -----------------------------------------------------------------------------

class Process(models.Model):

    """ A type of process that can be performed on a document.

        For example:

          - import
          - split
          - normalize
          - ocr
          - index
    """

    name = models.SlugField(
        max_length = 64,
        unique     = True,
        db_index   = True,
        help_text  = 'A unique identifier for this process.' )

    queue_name = property(
        lambda self : (
            '%s_%s' % (
                settings.S3_BUCKET,
                self.name )
            ).replace('.','_'))

    visibility_timeout = models.IntegerField(
        default   = 180,
        help_text = 'Time after which the process is deemed to have failed' )

    inputs = models.ManyToManyField(
        'ViewType',
        related_name = 'consumers',
        help_text    = 'process outputs in which this process is interested' )

    def __unicode__(self):
        """ The textual representation of this object as a string
        """
        return self.name

    def inputs_as_text(self):
        return ', '.join(map(str, self.inputs.all()))

    inputs_as_text.short_description = 'inputs'

    def outputs_as_text(self):
        return ', '.join(map(str, self.outputs.all()))

    outputs_as_text.short_description = 'outputs'

    class Admin:
        """ Configuration for admin interface
        """
        list_display = ( 'name', 'queue_name', 'inputs_as_text', 'outputs_as_text' )

# -----------------------------------------------------------------------------

class Processor(models.Model):
    """ An instance of a process type, given by the ip address on which the
        process is running.
    """
    process = models.ForeignKey(
        Process,
        related_name = 'processors')

    address = models.IPAddressField(
        db_index = True )

    name = property(
        lambda self : '%s@%s' % (self.process, self.address) )

    queue_name = property(
        lambda self : self.process.queue_name )

    visibility_timeout = property(
        lambda self : self.process.visibility_timeout )

    inputs = property(
        lambda self : self.process.inputs )

    outputs = property(
        lambda self : self.process.outputs )

    temp_dir = gettempdir()

    def __unicode__(self):
        """ The textual representation of this object as a string
        """
        return self.name

    def inputs_as_text(self):
        return ', '.join(map(str, self.inputs.all()))

    inputs_as_text.short_description = 'inputs'

    def outputs_as_text(self):
        return ', '.join(map(str, self.outputs.all()))

    outputs_as_text.short_description = 'outputs'

    class Admin:
        list_display = ('process', 'address', 'queue_name', 'inputs_as_text', 'outputs_as_text')

# -----------------------------------------------------------------------------

class EventType(models.Model):

    """ A type of event that can occur over the lifetime of a document.

        For example:

          - Accepted
          - Started
          - Failed
          - Completed
    """

    name = models.SlugField(
        max_length = 32,
        unique     = True,
        db_index   = True)

    def __unicode__(self) :
        return str(self.name)

    class Admin:
        pass

# -----------------------------------------------------------------------------

class EventLog(models.Model):

    _content_type = models.ForeignKey(
        ContentType,
        blank = True,
        null  = True)

    _content_id = models.PositiveIntegerField()

    item = generic.GenericForeignKey()

    processor = models.ForeignKey(
        Processor,
        related_name = 'history')

    timestamp = models.DateTimeField(
        auto_now = True)

    event_type = models.ForeignKey(EventType)

    notes = models.TextField(blank=True)

    class Meta:
        verbose_name = 'log entry'
        verbose_name_plural = 'log entries'
        ordering = ('-timestamp',)

    class Admin:
        pass

# -----------------------------------------------------------------------------

class Tag(models.Model):

    """
    """

    owner = models.ForeignKey(
        User,
        related_name = 'tags')

    label = models.CharField(
        max_length = 64,
        blank = False,
        null = False,
        db_index = True )

    def __unicode__(self):
        return str(self.label)

    class Meta:
        unique_together = (
            ( 'owner', 'label', ),
            )

# -----------------------------------------------------------------------------

class Document(models.Model):

    """ A document.
    """

    owner = models.ForeignKey(
        User,
        related_name = 'documents')

    title = models.CharField(
        max_length = 255,
        blank      = True,
        default    = '' )

    num_pages = property( lambda self: self.bindings.count() )

    history = generic.GenericRelation(EventLog)

    since_created = property(lambda self : timesince(self.history[0].timestamp))

    tag_set = models.ManyToManyField(
        Tag,
        related_name = 'documents',
        blank = True,
        symmetrical = True )

    @make_property
    def tags():
        """ Tags for this document
        """
        def fget(self):
            return ', '.join( [ tag.label for tag in self.tag_set.all() ] )
        def fset(self, text):
            phrases = [ part.strip() for part in text.lower().split(',') ]
            self.tag_set = [
                Tag.objects.get_or_create(
                    label = phrase,
                    owner = self.owner) [0]
                for phrase in phrases if len(phrase) > 0 ]
        return locals()

    def get_absolute_url(self):
        """ Public URL of this object
        """
        return '/store/doc/%s/' % self.id

    def __unicode__(self) :
        return self.title

    class Admin:
        pass


# -----------------------------------------------------------------------------

class ViewType(models.Model):
    """ A type of view of a document.

        For example:

          - original
          - normalized
          - pdf
    """

    producer = models.ForeignKey(
        Process,
        related_name = 'outputs',
        help_text    = 'The process that creates this representation' )

    name = models.SlugField(
        max_length = 64,
        #core       = True,
        db_index   = True )

    content_type = models.CharField(
        max_length   = 64,
        blank        = False,
        #core         = True,
        help_text    = 'MIME content type for this representation' )

    def consumers_as_text(self):
        return ', '.join(map(str, self.outputs.all()))

    consumers_as_text.short_description = 'consumers'

    def __unicode__(self):
        return self.name

    class Meta:
        unique_together = (
            ( 'producer', 'name' ),
            )

    class Admin:
        list_display = ( 'name', 'producer', 'content_type', 'consumers_as_text' )


# -----------------------------------------------------------------------------

class DocView(models.Model):

    """ A view of a document.  These objects primarily track the existence of
        a document view and provide some helper properties to map a view into
        S3.

        A document view is addressed in S3 as:

        http(s)://<s3-host>/<bucket>/<owner>/document/<document-id>/<view-type>

    """

    document = models.ForeignKey(
        Document,
        related_name='doc_views')

    view_type = models.ForeignKey(
        ViewType,
        related_name = 'doc_views',
        radio_admin  = True)

    s3_path = property(
        lambda self : '%s/document/%s/%s' % (
            self.document.owner.username,
            self.document.id,
            self.view_type.name ))

    s3_object = property(_get_s3_object)

    get_s3_url = _get_s3_url

    history = generic.GenericRelation(EventLog)

# -----------------------------------------------------------------------------

class Page(models.Model):

    """  Object (actually, just the identifier) which represents a page.
    """

    owner = models.ForeignKey(
        User,
        related_name = 'pages')

    def get_view(self, view_name):
        return self.page_views.get(view_type__name = view_name)

    def get_s3_object(self, view_name):
        return self.get_view(view_name).s3_object

    def get_s3_path(self, view_name):
        return self.get_views(view_name).s3_path

    def download_to_stream( self, view_name, out_stream ):
        return core_utils.download_file_from_s3(
            core_utils.get_s3_bucket(),
            self.get_view(view_name).s3_path,
            out_stream )

    def download_to_file( self, view_name, path ):
        with open(path, 'wb') as stream:
            meta_data = self.download_to_stream(view_name, stream)
            meta_data['Local-Path'] = path
            return meta_data

    def download_to_memory(self, view_name ):
        stream = StringIO()
        meta_data = self.download_to_stream(view_name, stream)
        meta_data['Content'] = stream.getvalue()
        return meta_data

    def __unicode__(self):
        return "page" + str(self.id)

    def get_absolute_url(self):
        return '/page/%s/' % self.id

    class Admin:
        pass

# -----------------------------------------------------------------------------

class PageView(models.Model):
    """
    A view of a page.  These object primarily track the existence of a
    view and provide some helper properties to map a view into S3.

    A page view is addressed in S3 as

      http(s)://<s3-host>/<bucket>/<owner>/page/<page-id>/<view-type>
    """

    page = models.ForeignKey(Page, related_name='page_views')

    view_type = models.ForeignKey(
        ViewType,
        related_name = 'page_views',
        radio_admin  = True,)

    history = generic.GenericRelation(EventLog)

    s3_path = property(
        lambda self : '%s/page/%s/%s' % (
            self.page.owner.username,
            self.page.id,
            self.view_type.name ))

    s3_object = property(_get_s3_object)

    get_s3_url = _get_s3_url

    def get_absolute_url(self):
        return self.get_s3_url()

    def __unicode__(self):
        return "view%d: %s.%s" %(
                self.id,
                self.page,
                self.view_type)
    class Admin:
        pass
# -----------------------------------------------------------------------------

class Binding(models.Model):
    """
    An association between a document and a page.  Captures the location
    of the paged within the document.
    """

    document = models.ForeignKey(
        Document,
        related_name = 'bindings')

    page = models.ForeignKey(
        Page,
        related_name = 'bindings')

    page_number = models.IntegerField()

    class Admin:
        pass

# -----------------------------------------------------------------------------

class Query(models.Model):
    """
    A query that the user has previously run
    """

    owner = models.ForeignKey(
        User,
        related_name = 'queries')

    last_run = models.DateTimeField(
        db_index   = True,
        auto_now = True)

    since_last_run = property(lambda self : timesince(self.last_run))

    name = models.CharField(
        max_length = 64,
        blank      = True,
        db_index   = True)

    value = models.CharField(
        max_length = 255,
        db_index   = True)

    class Admin:
        pass

## -----------------------------------------------------------------------------
#
#class OpenID(models.Model):
#    """
#    An OpenID URL for a user
#    """
#
#    user = models.ForeignKey(
#        User,
#        edit_inline         = models.TABULAR,
#        num_in_admin        = 1,
#        min_num_in_admin    = 1,
#        max_num_in_admin    = 1,
#        num_extra_on_change = 0 )
#
#    url = models.URLField(
#        core     = True,
#        unique   = True,
#        db_index = True )
#
## -----------------------------------------------------------------------------
#
#class FaxInfo(models.Model):
#    """
#    Fax information for a user
#    """
#
#    user = models.ForeignKey(
#        User,
#        edit_inline         = models.TABULAR,
#        num_in_admin        = 1,
#        min_num_in_admin    = 1,
#        max_num_in_admin    = 1,
#        num_extra_on_change = 0 )
#
#
#    fax_number = models.CharField(
#        max_length = 64,
#        core      = True,
#        unique    = True,
#        db_index  = True )
#
## -----------------------------------------------------------------------------
